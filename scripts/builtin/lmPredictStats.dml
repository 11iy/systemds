#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This builtin function computes and prints a summary of accuracy
# measures for regression problems.
#
# INPUT:
# ------------------------------------------------------------------------------
# yhat     column vector of predicted response values y
# ytest    column vector of actual response values y
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------
# R        column vector holding avg_res, ss_avg_res, and R2
# ------------------------------------------------------------------------------

m_lmPredictStats = function(Matrix[Double] yhat, Matrix[Double] ytest)
  return (Matrix[Double] R)
{
  y_residual = ytest - yhat;
  avg_res = sum(y_residual) / nrow(ytest);
  ss_res = sum(y_residual^2);
  ss_avg_res = ss_res - nrow(ytest) * avg_res^2;
  R2 = 1 - ss_res / (sum(ytest^2) - nrow(ytest) * (sum(ytest)/nrow(ytest))^2);
  print("\nAccuracy:" +
        "\n--sum(ytest) = " + sum(ytest) +
        "\n--sum(yhat) = " + sum(yhat) +
        "\n--AVG_RES_Y: " + avg_res +
        "\n--SS_AVG_RES_Y: " + ss_avg_res +
        "\n--R2: " + R2 );
  R = as.matrix(list(avg_res, ss_avg_res, R2));
}
